{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { makeRequest } from \"../makeRequest\";\n\n// This defines a custom React hook called useFetch. The hook takes a single argument, \n// url, which is the endpoint of the API to fetch. It uses the useState hook to define \n// three state variables: data, loading, and error. The data state variable is used to store the response data from the API. \n// It is initialized as null because we don't have any data yet. The loading state variable is \n// used to indicate whether or not the API request is currently being made. It is initialized as false because \n// we are not making any requests yet. The error state\n// variable is used to indicate whether or not the API request failed. It is initialized \n// as false because we haven't made any requests yet.\n\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  // This uses the useEffect hook to make the API request. \n  // It calls an async function called fetchData that sets \n  // the loading state to true to indicate that the request is being made. \n  // It then uses the makeRequest module's get method to make the API request with the provided url. \n  // If the request is successful, the setData function is called to update the data state with the response data. \n  // If the request fails, the setError function is called to set the error state to true. \n  // Finally, the loading state is set back to false to indicate that the request has finished. The useEffect hook \n  // takes a dependency array containing the url argument, which ensures that the hook will only re-run if the url changes.\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const res = await makeRequest.get(url);\n        setData(res.data.data);\n      } catch (err) {\n        setError(true);\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s(useFetch, \"bUDdnDopLs7sI4ubr9BcUYSaQYs=\");\nexport default useFetch;","map":{"version":3,"names":["useEffect","useState","makeRequest","useFetch","url","_s","data","setData","loading","setLoading","error","setError","fetchData","res","get","err"],"sources":["/home/dagim/Desktop/YohannesEcommerce/client/src/hooks/useFetch.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { makeRequest } from \"../makeRequest\";\n\n\n// This defines a custom React hook called useFetch. The hook takes a single argument, \n// url, which is the endpoint of the API to fetch. It uses the useState hook to define \n// three state variables: data, loading, and error. The data state variable is used to store the response data from the API. \n// It is initialized as null because we don't have any data yet. The loading state variable is \n// used to indicate whether or not the API request is currently being made. It is initialized as false because \n// we are not making any requests yet. The error state\n// variable is used to indicate whether or not the API request failed. It is initialized \n// as false because we haven't made any requests yet.\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  // This uses the useEffect hook to make the API request. \n  // It calls an async function called fetchData that sets \n  // the loading state to true to indicate that the request is being made. \n  // It then uses the makeRequest module's get method to make the API request with the provided url. \n  // If the request is successful, the setData function is called to update the data state with the response data. \n  // If the request fails, the setError function is called to set the error state to true. \n  // Finally, the loading state is set back to false to indicate that the request has finished. The useEffect hook \n  // takes a dependency array containing the url argument, which ensures that the hook will only re-run if the url changes.\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const res = await makeRequest.get(url);\n        setData(res.data.data);\n      } catch (err) {\n        setError(true);\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n};\n\nexport default useFetch;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,gBAAgB;;AAG5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAEzC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMI,GAAG,GAAG,MAAMX,WAAW,CAACY,GAAG,CAACV,GAAG,CAAC;QACtCG,OAAO,CAACM,GAAG,CAACP,IAAI,CAACA,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZJ,QAAQ,CAAC,IAAI,CAAC;MAChB;MACAF,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IACDG,SAAS,EAAE;EACb,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACL,EAAA,CA7BIF,QAAQ;AA+Bd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}